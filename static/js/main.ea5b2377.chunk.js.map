{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","App.js","index.js"],"names":["FeedbackOptions","onClick","options","className","map","option","type","Section","title","children","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","floor","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAGO,SAASA,EAAT,GAAgD,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACzC,OACE,oBAAIC,UAAU,YAAd,SACGD,EAAQE,KAAI,SAAAC,GACX,OACE,oBAAiBF,UAAU,kBAA3B,SACE,wBACEG,KAAK,SACLH,UAAU,oBACVF,QAAS,WACPA,EAAQI,IAJZ,SAOGA,KARIA,Q,MCLZ,SAASE,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/B,OACE,0BAASN,UAAU,UAAnB,UACGK,GAAS,oBAAIL,UAAU,iBAAd,SAAgCK,IACzCC,KCLA,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QAC7B,OAAO,mBAAGR,UAAU,eAAb,SAA6BQ,I,MCA/B,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBACtD,OACE,qBAAId,UAAU,aAAd,UACE,qBAAIA,UAAU,mBAAd,mBAAwCU,EAAxC,OACA,qBAAIV,UAAU,mBAAd,sBAA2CW,KAC3C,qBAAIX,UAAU,mBAAd,kBAAuCY,KACvC,qBAAIZ,UAAU,mBAAd,oBAAyCa,KACzC,qBAAIb,UAAU,mBAAd,gCACsBc,GAAsB,EAD5C,UCFS,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOL,EAAP,KAAgBO,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOJ,EAAP,KAAYO,EAAZ,KAoBMC,EAAqB,kBAAMV,EAAOC,EAAUC,GAUlD,OACE,qCACE,cAAC,EAAD,CAASP,MAAM,6BAAf,SACE,cAAC,EAAD,CACEP,QA/Be,SAAAI,GACrB,OAAQA,GACN,IAAK,OAEH,YADAe,GAAQ,SAAAP,GAAI,OAAIA,EAAO,KAEzB,IAAK,UAEH,YADAQ,GAAW,SAAAP,GAAO,OAAIA,EAAU,KAElC,IAAK,MAEH,YADAQ,GAAO,SAAAP,GAAG,OAAIA,EAAM,KAEtB,QACE,SAoBEb,QAAS,CAAC,OAAQ,UAAW,WAGjC,cAAC,EAAD,UAC0B,IAAvBqB,EACC,cAACb,EAAD,CAAcC,QAAQ,sBAEtB,cAAC,EAAD,CACEE,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,IACPN,mBAxB8B,WACtC,IAAMD,EAAQO,IAEd,OAAOC,KAAKC,MAAc,IAAPZ,EAAcG,GAqBLU,UCrDhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACX,EAAD,MAEFY,SAASC,eAAe,W","file":"static/js/main.ea5b2377.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './FeedbackOptions.css';\r\n\r\nexport function FeedbackOptions({ onClick, options }) {\r\n  return (\r\n    <ul className=\"feedbacks\">\r\n      {options.map(option => {\r\n        return (\r\n          <li key={option} className=\"feedbacks__item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"feedbacks__button\"\r\n              onClick={() => {\r\n                onClick(option);\r\n              }}\r\n            >\r\n              {option}\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport './Section.css';\r\n\r\nexport function Section({ title, children }) {\r\n  return (\r\n    <section className=\"section\">\r\n      {title && <h2 className=\"section__title\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.object.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport function Notification({ message }) {\r\n  return <p className=\"notification\">{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport './Statistics.css';\r\n\r\nexport function Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul className=\"statistics\">\r\n      <li className=\"statistics__item\">Good: {good} </li>\r\n      <li className=\"statistics__item\">Neutral: {neutral}</li>\r\n      <li className=\"statistics__item\">Bad: {bad}</li>\r\n      <li className=\"statistics__item\">Total: {total}</li>\r\n      <li className=\"statistics__item\">\r\n        Positive Feedback: {positivePercentage || 0}%\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import { useState } from 'react';\r\n\r\n// import components\r\nimport { FeedbackOptions } from './components';\r\nimport { Section } from './components';\r\nimport { Notification } from './components';\r\nimport { Statistics } from './components';\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  // function to handle clicks\r\n  const onClickHandler = option => {\r\n    switch (option) {\r\n      case 'good':\r\n        setGood(good => good + 1);\r\n        return;\r\n      case 'neutral':\r\n        setNeutral(neutral => neutral + 1);\r\n        return;\r\n      case 'bad':\r\n        setBad(bad => bad + 1);\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  // function to count total feedbacks\r\n  const countTotalFeedback = () => good + neutral + bad;\r\n\r\n  // function to count average positive feedback percentage\r\n  const countPositiveFeedbackPercentage = () => {\r\n    const total = countTotalFeedback();\r\n\r\n    return Math.floor((good * 100) / total);\r\n  };\r\n\r\n  // !imp Can we get all states as iterable array?\r\n  return (\r\n    <>\r\n      <Section title=\"Please leave your feedback\">\r\n        <FeedbackOptions\r\n          onClick={onClickHandler}\r\n          options={['good', 'neutral', 'bad']}\r\n        />\r\n      </Section>\r\n      <Section>\r\n        {countTotalFeedback === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n        ) : (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n      </Section>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}